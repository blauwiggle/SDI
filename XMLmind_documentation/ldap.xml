<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.1" xml:id="ldap" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xila="http://www.w3.org/2001/XInclude/local-attributes"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:trans="http://docbook.org/ns/transclusion"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title>LDAP</title>

  <section xml:id="ldap_browse_an_existing_ldap_server">
    <title>Browse an existing LDAP Server</title>

    <para>We browsed the LDAP Server at <systemitem
    class="domainname">ldap1.mi.hdm-stuttgart.de</systemitem> using <link
    xlink:href="https://directory.apache.org/studio/">Apache Directory
    Studio</link>. First we connected as anonymous user. Finding our names was
    easy by just typing in <userinput>uid</userinput> and our respective
    <userinput>HdM token</userinput> in the filter fields. Then we reconnected
    with our user DNs. The difference was that we were now able to see our
    enrolment numbers.</para>

    <para>Using the <command>ldapsearch</command> tool wasn't too difficult.
    We just had to install the <package>ldap-utils</package> package. Then we
    reconfigured the <filename>ldap.conf</filename> file under
    <filename>/etc/ldap</filename> with our server parameters. Then we could
    just execute for example the following command:</para>

    <screen>ldapsearch -x -H ldap://ldap1.mi.hdm-stuttgart.de -b "dc=hdm-stuttgart,dc=de" -s sub "uid=fs120"</screen>

    <screen># extended LDIF
#
# LDAPv3
# base &lt;dc=hdm-stuttgart,dc=de&gt; with scope subtree
# filter: uid=fs120
# requesting: ALL
#

# fs120, userlist, hdm-stuttgart.de
dn: uid=fs120,ou=userlist,dc=hdm-stuttgart,dc=de
objectClass: hdmAccount
objectClass: hdmStudent
objectClass: inetOrgPerson
objectClass: posixAccount
objectClass: shadowAccount
objectClass: eduPerson
uid: fs120
mail: fs120@hdm-Stuttgart.de
uidNumber: 62717
cn: Skobowsky Florian Michael
loginShell: /bin/sh
hdmCategory: 1
gidNumber: 100
homeDirectory: /home/stud/f/fs120
sn: Skobowsky

# search result
search: 2
result: 0 Success

# numResponses: 2
# numEntries: 1
❯ ldapsearch -x -H ldap://ldap1.mi.hdm-stuttgart.de -b "dc=hdm-stuttgart,dc=de" -s sub "uid=fs120"
# extended LDIF
#
# LDAPv3
# base &lt;dc=hdm-stuttgart,dc=de&gt; with scope subtree
# filter: uid=fs120
# requesting: ALL
#

# fs120, userlist, hdm-stuttgart.de
dn: uid=fs120,ou=userlist,dc=hdm-stuttgart,dc=de
objectClass: hdmAccount
objectClass: hdmStudent
objectClass: inetOrgPerson
objectClass: posixAccount
objectClass: shadowAccount
objectClass: eduPerson
uid: fs120
mail: fs120@hdm-Stuttgart.de
uidNumber: 62717
cn: Skobowsky Florian Michael
loginShell: /bin/sh
hdmCategory: 1
gidNumber: 100
homeDirectory: /home/stud/f/fs120
sn: Skobowsky

# search result
search: 2
result: 0 Success

# numResponses: 2
# numEntries: 1</screen>
  </section>

  <section xml:id="ldap_set_up_an_openldap_server">
    <title>Set up an OpenLdap server</title>

    <para>We installed the server by running:</para>

    <screen>aptitude install dialog
aptitude install slapd</screen>

    <para>Afterwards we set the server's root DIT to
    <code>dc=betrayer,dc=com</code> by using <command>dpkg-reconfigure
    slapd</command>.</para>
  </section>

  <section xml:id="ldap_populating_the_dit">
    <title>Populating the DIT</title>

    <para>We populated our server with test data as described on the
    respective <link
    xlink:href="https://freedocs.mi.hdm-stuttgart.de/ldapCompanyLdif.html">slide</link>
    in <link
    xlink:href="https://freedocs.mi.hdm-stuttgart.de/">freedocs</link> using
    the Apache Directory Studio. The export dump after doing this looked as
    follows:</para>

    <screen>version: 1

dn: dc=betrayer,dc=com
objectClass: dcObject
objectClass: organization
objectClass: top
dc: betrayer
o: betrayerOrg

dn: cn=admin,dc=betrayer,dc=com
objectClass: organizationalRole
objectClass: simpleSecurityObject
cn: admin
userPassword:: e1NTSEF9OVNyTE5xNytTRDd1aWxBMXp0UFBMWS9GbENpNzdpUXg=
description: LDAP administrator

dn: ou=departments,dc=betrayer,dc=com
objectClass: organizationalUnit
objectClass: top
ou: departments

dn: ou=software,ou=departments,dc=betrayer,dc=com
objectClass: organizationalUnit
objectClass: top
ou: software

dn: ou=financial,ou=departments,dc=betrayer,dc=com
objectClass: organizationalUnit
objectClass: top
ou: financial

dn: ou=devel,ou=software,ou=departments,dc=betrayer,dc=com
objectClass: organizationalUnit
objectClass: top
ou: devel

dn: ou=testing,ou=software,ou=departments,dc=betrayer,dc=com
objectClass: organizationalUnit
objectClass: top
ou: testing

dn: uid=bean,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com
objectClass: inetOrgPerson
objectClass: organizationalPerson
objectClass: person
objectClass: top
cn: Jim Bean
sn: Bean
givenName: Jim
mail: bean@betrayer.com
uid: bean
userPassword:: ZTNOdFpEVjlZVmhLTDJKbFZrRjJURFJFTms5cE1GUkxjRGhqTTNvdllUWlFae
 kJYZUhBPQ==

dn: uid=smith,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com
objectClass: inetOrgPerson
objectClass: organizationalPerson
objectClass: person
objectClass: top
cn: Anne Smith
sn: Smith
givenName: Anne
mail: smith@betrayer.com
uid: smith
userPassword:: ZHNnb2lqczk4Ji8oM2huN2YzUisjMyMrwqcoKcKnej05acKnOXpoYzg5N3o3
</screen>
  </section>

  <section xml:id="ldap_testing_a_bind_operation_as_non_admin_user">
    <title>Testing a bind operation as non - admin user</title>

    <para>We created a second profile binding with
    <code>uid=beam,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com</code>
    and used it for the connection. It worked. We could now see the password
    of the user bean but not the ones of the other users.</para>
  </section>

  <section xml:id="ldap_accessing_ldap_data_by_a_mail_client">
    <title>Accessing LDAP data by a mail client</title>

    <para>We configured our mail clients to use our LDAP Server for email
    address lookup. The example image shows the result in Thunderbird:</para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="images/thunderbird.png" format="JPG" width="0"/>
      </imageobject>
    </mediaobject>
  </section>

  <section xml:id="ldap_ldap_configuration">
    <title>LDAP configuration</title>

    <para>First, we enabled remote access for the admin user for the
    configuration database by creating a file with: <screen>dn: olcDatabase={0}config,cn=config
	add: olcRootPW
	olcRootPW: {SSHA}9SrLNq7+SD7uilA1ztPPLY/FlCi77iQx</screen> and executing it
    with:<screen>ldapmodify -Q -Y EXTERNAL -H ldapi:/// -f ~/add_olcRootPW.ldif</screen></para>

    <para>Now we were able to login as <systemitem
    class="username">admin</systemitem> to our configuration database. We set
    the <code>olcLogLevel</code> attribute in <code>cn=admin</code> to
    <code>stats</code> and created a new attribute <code>olcLogFile</code>
    with the value <code>/var/log/ldap.log</code>. To configure the system to
    write all log messages to our specified file we created a file
    <filename>/etc/rsyslog.d/slapd.conf</filename> and filled it with:
    <screen>local4.*                        /var/log/ldap.log</screen>Then we
    restarted the <code>rsyslog</code> service a got the desired
    result.</para>
  </section>

  <section xml:id="ldap_filter_based_search">
    <title>Filter based search</title>

    <para>We searched for all users with a uid attribute value starting with
    the letter “b” by using this query:<screen>ldapsearch -x -b "dc=betrayer,dc=com" -s sub "(uid=b*)"</screen>and
    got the following result:<screen>mail: bean@betrayer.com
givenName: Jim
cn: Jim Bean
sn: Bean
objectClass: inetOrgPerson
objectClass: organizationalPerson
objectClass: person
objectClass: top

# search result
search: 2
result: 0 Success

# numResponses: 2
# numEntries: 1
❯ ldapsearch -x -b "dc=betrayer,dc=com" -s sub "(uid=b*)"
❯ ldapsearch -x -b "dc=betrayer,dc=com" -s sub "(uid=b*)"
# extended LDIF
#
# LDAPv3
# base &lt;dc=betrayer,dc=com&gt; with scope subtree
# filter: (uid=b*)
# requesting: ALL
#

# bean, devel, software, departments, betrayer.com
dn: uid=bean,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com
uid: bean
mail: bean@betrayer.com
givenName: Jim
cn: Jim Bean
sn: Bean
objectClass: inetOrgPerson
objectClass: organizationalPerson
objectClass: person
objectClass: top

# search result
search: 2
result: 0 Success

# numResponses: 2
# numEntries: 1</screen> Then we searched for all entries either with either a
    defined uid attribute or a ou attribute starting with letter “d” with this
    query:<screen>ldapsearch -x -b "dc=betrayer,dc=com" -s sub "(|(ou=d*)(uid=*))"
</screen> The result was:<screen>departments, betrayer.com
: ou=departments,dc=betrayer,dc=com
: departments
jectClass: organizationalUnit
jectClass: top

devel, software, departments, betrayer.com
: ou=devel,ou=software,ou=departments,dc=betrayer,dc=com
: devel
jectClass: organizationalUnit
jectClass: top

bean, devel, software, departments, betrayer.com
: uid=bean,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com
d: bean
il: bean@betrayer.com
venName: Jim
: Jim Bean
: Bean
jectClass: inetOrgPerson
jectClass: organizationalPerson
jectClass: person
jectClass: top

smith, devel, software, departments, betrayer.com
: uid=smith,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com
d: smith
: Anne Smith
: Smith
jectClass: inetOrgPerson
jectClass: organizationalPerson
jectClass: person
jectClass: top
venName: Anne
il: smith@betrayer.com

search result
arch: 2
sult: 0 Success

numResponses: 5
numEntries: 4</screen></para>
  </section>

  <section xml:id="ldap_extending_an_existing_entry">
    <title>Extending an existing entry</title>

    <para>To add the <code>objectClass</code> <code>posixAccount</code> and
    its according attributes <code>uidNumber</code>, <code>gidNumber</code>
    and <code>homeDirectory</code> we created a ldif file with:<screen>dn: uid=bean,ou=devel,ou=software,ou=departments,dc=betrayer,dc=com
changetype: modify
add: homeDirectory
homeDirectory: /home/bean
-
add: uidNumber
uidNumber: 1
-
add: objectClass
objectClass: posixAccount
-
add: gidNumber
gidNumber: 1
-</screen> Then we applied it with:<screen>ldapmodify -x -D "cn=admin,dc=betrayer,dc=com" -w sdi8a -H ldap:// -f ~/modify_bean.ldif</screen></para>
  </section>

  <section xml:id="ldap_ldap_based_user_login">
    <title>LDAP based user login</title>

    <para>The task was to enable our <systemitem class="server">SDI8b
    machine</systemitem> to handle users by querying our LDAP Server on our
    <systemitem class="server">SDI8a machine</systemitem>. To achieve this we
    installed the package <package>libpam-ldapd</package> and provided the
    necessary data during the configuration process. The we told the system to
    use the LDAP data by changing the following lines in
    <filename>/etc/nsswitch.conf</filename>:<screen>passwd:         files ldap
group:          files ldap
shadow:         files ldap</screen>Next we shut down the <code>nscd</code>
    deamon to prevent usage of invalid cached data. We restarted our VM and
    then we tested the LDAP setup by executing:<screen>id bean</screen>The
    result showed that we were successful:<screen>uid=1(daemon) gid=1(daemon) Gruppen=1(daemon)
</screen></para>
  </section>
</chapter>
